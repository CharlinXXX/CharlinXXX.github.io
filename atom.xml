<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Charlin&#39;s blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-12-31T19:32:55.706Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Charlin</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>人生的2024年答卷</title>
    <link href="http://example.com/2024/12/31/%E4%BA%BA%E7%94%9F%E7%9A%842024%E5%B9%B4%E7%AD%94%E5%8D%B7/"/>
    <id>http://example.com/2024/12/31/%E4%BA%BA%E7%94%9F%E7%9A%842024%E5%B9%B4%E7%AD%94%E5%8D%B7/</id>
    <published>2024-12-31T15:47:36.000Z</published>
    <updated>2024-12-31T19:32:55.706Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2024年度总结"><a href="#2024年度总结" class="headerlink" title="2024年度总结"></a>2024年度总结</h2><blockquote><p>背景音乐为《在我成为井井有条的大人之前》最近循环的歌都是郭采洁的,很遗憾现在才关注到这位才女。ps:由于部署在Github，非梯子的读者音乐加载可能有点慢哦~<br><audio controls autoplay loop><br>  <source src="/music/background2024end.mp3" type="audio/mpeg"><br>  您的浏览器不支持音频元素。<br></audio></p></blockquote><p>  现在是北京时间2025年1月1日0点51分 躺卧在床上，小桌板上的电饭锅是吃剩的紫薯。耳边伴随郭采洁的歌和四处此起彼伏的烟火的爆鸣声。今年的跨年略显冷清，因为元旦假期位于周三便没有回家，女友也去了旅游。独处有助于思考。由此我展开了对2024年的回忆……😌<br>  <img src="/images/2024end/1.png" alt="图"></p><h3 id="2024的三件大事"><a href="#2024的三件大事" class="headerlink" title="2024的三件大事"></a>2024的三件大事</h3><p>  2024年可以说是我这短短的22年阅历的人生中重要的一年。1.结束了学生的人生身份。2.将断断续续喜欢了半年的女生从朋友变为女朋友。3.开始频繁的和父母表述自己的思考。🤔<br>  从7岁上小学到现在22岁毕业也算是当了15年学生，学生的生活对于我来说是乏味的，或许是由于我生性好动思维跳脱若把我摁桌凳上，只能学着教育系统制定者规划的知识，这对我来说属实折磨。索性时光飞逝来到了高二高三，误读了太宰治的书。对我的心智有了小小的震撼误做了一回愤世嫉俗的文青，过早的进入了虚无主义。浑浑噩噩的便高考，上了一所可有可无的大学。到这时开始思考未来，用着浅薄的见闻和自我内耗般的思考去批判但自己又过着的俗人生活。但也在这个过程中积累了一些可能有用的人生思考。大学中对自己最有意义的事，1是断断续续去做了两年的物理补习老师锻炼表达能力。2是自己找到了做游戏这个路子，游戏本身没多喜欢，喜欢的是将灵光一闪的创意变成现实的过程。<br>  到现在也是工作了半年，过渡到社会对我来说似乎不太困难。可能也和进过几次厂打过几个月螺丝的磨练有关，做一个前端半后端的程序员属实是舒适圈。真正工作后悟到一个思维方式：人去匹配想要的工作的过程只有痛苦，而人明白自己想做什么而去匹配适合自己的工作才更加合理。<br>  <img src="/images/2024end/4.png" alt="图"><br>  关于女朋友的部分就不多陈述啦，祝我们天长地久吧💕。（ps：女朋友快生日了祝她生日快乐）<br>  <img src="/images/2024end/2.png" alt="图"><br>  开始频繁的和父母交换一些人生观价值观让我们更了解彼此。或许也是长大了，站在成年人的角度进行交谈即是对自己的认可，也是让父母知道自己不再是小孩的机会。祝家父家母身体健康万事如意🙌<br>  <img src="/images/2024end/3.png" alt="图"></p><h3 id="2024的成果"><a href="#2024的成果" class="headerlink" title="2024的成果"></a>2024的成果</h3><p>  1.做了一个个人网站<br>  2.做了四个游戏项目（两个课设、一个外包、一个毕设）<br>  <img src="/images/2024end/5.png" alt="图"><br>  3.爬了两座山（龙渔线12km、望郎归18km）<br>  <img src="/images/2024end/7.png" alt="图"><br>  <img src="/images/2024end/6.png" alt="图"><br>  4.跑了95km（退步太多了😢）<br>  <img src="/images/2024end/8.png" alt="图"></p><h3 id="2024对人生意义思考的一句话"><a href="#2024对人生意义思考的一句话" class="headerlink" title="2024对人生意义思考的一句话"></a>2024对人生意义思考的一句话</h3><p>  半年前我曾对自己定下一个flag每一年对人生意义这个宏大命题进行一句话的总结。而2024年的对人生意义的总结就是→<img src="/images/2024end/9.png" alt="图"></p><h3 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h3><p>  希望新的一年我可以事事顺心，找到并实现新的目标。2025年祝你我生活美满幸福！新年快乐！！！</p><blockquote><p>现在是北京时间2025年1月1日3点24分 晚安。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;2024年度总结&quot;&gt;&lt;a href=&quot;#2024年度总结&quot; class=&quot;headerlink&quot; title=&quot;2024年度总结&quot;&gt;&lt;/a&gt;2024年度总结&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;背景音乐为《在我成为井井有条的大人之前》最近循环的歌都是郭采洁的,</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>重新开始写作</title>
    <link href="http://example.com/2024/11/22/%E9%87%8D%E6%96%B0%E5%BC%80%E5%A7%8B%E5%86%99%E4%BD%9C/"/>
    <id>http://example.com/2024/11/22/%E9%87%8D%E6%96%B0%E5%BC%80%E5%A7%8B%E5%86%99%E4%BD%9C/</id>
    <published>2024-11-22T04:03:58.000Z</published>
    <updated>2024-11-27T04:12:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="新玩具"><a href="#新玩具" class="headerlink" title="新玩具"></a>新玩具</h2><p>最近趁着双十一活动以原价直降1k的骨折价购入大疆的Action4。上手体验后感觉实比手机更便捷，是我更有记录的欲望。从以前的走在路上看到令人陶醉的夕阳，想去留存在相册时都要看看身边有没有人留意我举起手机拍照的i人行为，到现在大胆将运动相机挂在脖子上无惧他人目光的举措，我感觉我得到了进化😁。</p><blockquote><p>下面附上本人记录并剪辑的第一条Vlog~</p></blockquote><div style="text-align: center;"><iframe width="560" height="315" src="//player.bilibili.com/player.html?isOutside=true&aid=113501053916544&bvid=BV191UnYkE87&cid=26819496556&p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div> ]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;新玩具&quot;&gt;&lt;a href=&quot;#新玩具&quot; class=&quot;headerlink&quot; title=&quot;新玩具&quot;&gt;&lt;/a&gt;新玩具&lt;/h2&gt;&lt;p&gt;最近趁着双十一活动以原价直降1k的骨折价购入大疆的Action4。上手体验后感觉实比手机更便捷，是我更有记录的欲望。从以前的走在路上</summary>
      
    
    
    
    <category term="所思所想" scheme="http://example.com/categories/%E6%89%80%E6%80%9D%E6%89%80%E6%83%B3/"/>
    
    
  </entry>
  
  <entry>
    <title>当代年轻人的现状</title>
    <link href="http://example.com/2024/10/19/%E5%BD%93%E4%BB%A3%E5%B9%B4%E8%BD%BB%E4%BA%BA%E7%9A%84%E7%8E%B0%E7%8A%B6/"/>
    <id>http://example.com/2024/10/19/%E5%BD%93%E4%BB%A3%E5%B9%B4%E8%BD%BB%E4%BA%BA%E7%9A%84%E7%8E%B0%E7%8A%B6/</id>
    <published>2024-10-19T04:15:39.000Z</published>
    <updated>2024-11-27T04:31:20.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/Post7/2.jpg" alt="图"><br>午后觉醒偶来珠江边醒醒神，微风拂过江面反射阳光泛起阵阵磷光，离远闪动我的双目，忽觉异常。原来是涨潮了。习惯性地扶撑着栏杆望着江面发呆。<br><img src="/images/Post7/4.jpg" alt="图"><br>耳边忽而传来远处的笑声，原来是四个上了年纪的大叔在用手抓鱼。细看脸上洋溢的是一份“童真”的笑容，仿佛有一刻看到四位孩童时玩耍的身影，心里不由得泛起一丝温纯。<br><img src="/images/Post7/3.jpg" alt="图"><br>“偷偷”拍了几张照想留存这些美好后，发现时间不早，到点上班了。<br><img src="/images/Post7/5.jpg" alt="图"><br>回去的路上看见一位衣着光鲜，年长我一些的女士面容苦涩，步伐匆忙……他们相比谁看起来更快乐呢？显而易见，如若问我如何解释这种现象呢？我只能说这个社会无形中趋势着年轻人不断追求，如果问我年轻人在追求什么呢？哈，我不得而知，每个人追求的都不同。<br><img src="/images/Post7/1.jpg" alt="图"><br>或者说问问自己，你——在追求什么。我们不妨偶尔停下脚步，思考一下自己想要一种什么状态的生活，那样的自己快乐吗？<br><img src="/images/Post7/6.jpg" alt="图"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/Post7/2.jpg&quot; alt=&quot;图&quot;&gt;&lt;br&gt;午后觉醒偶来珠江边醒醒神，微风拂过江面反射阳光泛起阵阵磷光，离远闪动我的双目，忽觉异常。原来是涨潮了。习惯性地扶撑着栏杆望着江面发呆。&lt;br&gt;&lt;img src=&quot;/images/Post7</summary>
      
    
    
    
    <category term="所思所想" scheme="http://example.com/categories/%E6%89%80%E6%80%9D%E6%89%80%E6%83%B3/"/>
    
    
  </entry>
  
  <entry>
    <title>用了一个星期手撸的俯视角射击游戏</title>
    <link href="http://example.com/2024/06/03/%E7%94%A8%E4%BA%86%E4%B8%80%E4%B8%AA%E6%98%9F%E6%9C%9F%E6%89%8B%E6%92%B8%E7%9A%84%E4%BF%AF%E8%A7%86%E8%A7%92%E5%B0%84%E5%87%BB%E6%B8%B8%E6%88%8F/"/>
    <id>http://example.com/2024/06/03/%E7%94%A8%E4%BA%86%E4%B8%80%E4%B8%AA%E6%98%9F%E6%9C%9F%E6%89%8B%E6%92%B8%E7%9A%84%E4%BF%AF%E8%A7%86%E8%A7%92%E5%B0%84%E5%87%BB%E6%B8%B8%E6%88%8F/</id>
    <published>2024-06-03T08:16:14.000Z</published>
    <updated>2024-06-03T10:44:16.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这是一个俯视角射击游戏，玩家掌控超级士兵不断的杀戮并存活下去吧！</p></blockquote><h3 id="视频展示"><a href="#视频展示" class="headerlink" title="视频展示"></a>视频展示</h3><div style="text-align: center;"><iframe width="560" height="315" src="//player.bilibili.com/player.html?isOutside=true&aid=1855373823&bvid=BV1ys421g72d&cid=1570268888&p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div><h2 id="难点技术实现"><a href="#难点技术实现" class="headerlink" title="难点技术实现"></a>难点技术实现</h2><blockquote><ul><li>丧尸的群智能算法实现以及性能优化</li><li>射击检测的优化</li><li>Animation Rigging纠正动画实现垂直方向转动步<br>枪</li><li>优化对象池的查询速度</li></ul></blockquote><h3 id="丧尸的群智能算法"><a href="#丧尸的群智能算法" class="headerlink" title="丧尸的群智能算法"></a>丧尸的群智能算法</h3><p>使用Boid算法并在其基础上进行优化实现了避障和索敌功能，并使用了计算着色器GPU上并行计算优化了性能调度。为了进一步优化性能，使用了Unity的Job System</p><blockquote><p>优化前<br><img src="/images/Post6/%E4%BC%98%E5%8C%96%E5%89%8D.png" alt="Notgate"><br>200只丧尸120帧左右<br>优化后<br>数量差不多情况下高达200帧<br><img src="/images/Post6/%E4%BC%98%E5%8C%96%E5%90%8E.png" alt="Notgate"></p></blockquote><h3 id="射击检测的优化"><a href="#射击检测的优化" class="headerlink" title="射击检测的优化"></a>射击检测的优化</h3><p>使用射线代替传统的碰撞检测，虽然需要自己计算碰撞的时间和具体碰撞的对象相关逻辑，但很好了避免了子弹出现子弹碰撞检测失败的问题，并配合粒子系统实现了子弹轨道视觉优化</p><h3 id="实现垂直方向转动"><a href="#实现垂直方向转动" class="headerlink" title="实现垂直方向转动"></a>实现垂直方向转动</h3><p>在该游戏中与传统的俯视角割草游戏不同的地方在于玩家操作多了一个维度，玩家可以控制步枪垂直方向转动，射击爬行丧尸或者较近的丧尸。<br>实现思路：使用Animation Rigging以枪支作为主体，与传统的将枪绑在手上作为子物体不同。然后使用脚本控制枪支模拟晃动增加真实感。</p><h3 id="优化对象池的查询速度"><a href="#优化对象池的查询速度" class="headerlink" title="优化对象池的查询速度"></a>优化对象池的查询速度</h3><p>为对象池的每一个对象增加了一个hashCode的属性，然后在对象池中使用了字典以制作一个伪哈希表，大大提高了对象池列表的查询速度。</p><h2 id="框架UML"><a href="#框架UML" class="headerlink" title="框架UML"></a>框架UML</h2><blockquote><p>以下类图均为chatgpt转换为plantuml然后生成<br>player的大致类图<br><img src="/images/Post6/Player.png" alt="Notgate"><br>zomble的大致类图<br><img src="/images/Post6/Zomble.png" alt="Notgate"></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;这是一个俯视角射击游戏，玩家掌控超级士兵不断的杀戮并存活下去吧！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;视频展示&quot;&gt;&lt;a href=&quot;#视频展示&quot; class=&quot;headerlink&quot; title=&quot;视频展示&quot;&gt;&lt;/a&gt;视频展示&lt;/h</summary>
      
    
    
    
    <category term="成果展示" scheme="http://example.com/categories/%E6%88%90%E6%9E%9C%E5%B1%95%E7%A4%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>C#中委托的用法及进阶</title>
    <link href="http://example.com/2024/05/24/C-%E4%B8%AD%E5%A7%94%E6%89%98%E7%9A%84%E7%94%A8%E6%B3%95%E5%8F%8A%E8%BF%9B%E9%98%B6/"/>
    <id>http://example.com/2024/05/24/C-%E4%B8%AD%E5%A7%94%E6%89%98%E7%9A%84%E7%94%A8%E6%B3%95%E5%8F%8A%E8%BF%9B%E9%98%B6/</id>
    <published>2024-05-24T13:49:40.000Z</published>
    <updated>2024-05-24T13:59:30.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在 C# 中，委托（delegate）是一种引用类型，用于封装一个或多个方法。它类似于函数指针，但更安全且更灵活。委托在事件处理和回调函数中广泛使用。以下是一些关于委托的详细用法和示例：</p></blockquote><h3 id="1-委托的定义和实例化"><a href="#1-委托的定义和实例化" class="headerlink" title="1. 委托的定义和实例化"></a>1. 委托的定义和实例化</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个委托</span></span><br><span class="line">public delegate <span class="type">void</span> <span class="title function_">MyDelegate</span><span class="params">(<span class="built_in">string</span> message)</span>;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Program</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">// 定义一个与委托匹配的方法</span></span><br><span class="line">    public <span class="type">static</span> <span class="type">void</span> <span class="title function_">ShowMessage</span><span class="params">(<span class="built_in">string</span> message)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="type">static</span> <span class="type">void</span> <span class="title function_">Main</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 实例化委托</span></span><br><span class="line">        MyDelegate del = new MyDelegate(ShowMessage);</span><br><span class="line">        <span class="comment">// 使用委托调用方法</span></span><br><span class="line">        del(<span class="string">&quot;Hello, Delegates!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-多播委托"><a href="#2-多播委托" class="headerlink" title="2. 多播委托"></a>2. 多播委托</h3><blockquote><p>一个委托实例可以引用多个方法，形成一个调用列表。当调用委托时，会依次调用列表中的所有方法。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">public delegate <span class="type">void</span> <span class="title function_">MyDelegate</span><span class="params">(<span class="built_in">string</span> message)</span>;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Program</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    public <span class="type">static</span> <span class="type">void</span> <span class="title function_">ShowMessage</span><span class="params">(<span class="built_in">string</span> message)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;ShowMessage: &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="type">static</span> <span class="type">void</span> <span class="title function_">ShowAnotherMessage</span><span class="params">(<span class="built_in">string</span> message)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;ShowAnotherMessage: &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="type">static</span> <span class="type">void</span> <span class="title function_">Main</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        MyDelegate del = ShowMessage;</span><br><span class="line">        del += ShowAnotherMessage;</span><br><span class="line"></span><br><span class="line">        del(<span class="string">&quot;Hello, Multicast Delegates!&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 移除一个方法</span></span><br><span class="line">        del -= ShowMessage;</span><br><span class="line">        del(<span class="string">&quot;Hello, after removing one method!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-委托作为参数"><a href="#3-委托作为参数" class="headerlink" title="3. 委托作为参数"></a>3. 委托作为参数</h3><blockquote><p>委托可以作为方法的参数，用于实现回调机制。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public delegate <span class="type">void</span> <span class="title function_">ProcessHandler</span><span class="params">(<span class="built_in">string</span> message)</span>;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Processor</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    public <span class="type">void</span> <span class="title function_">Process</span><span class="params">(ProcessHandler handler, <span class="built_in">string</span> message)</span></span><br><span class="line">    &#123;</span><br><span class="line">        handler(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Program</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    public <span class="type">static</span> <span class="type">void</span> <span class="title function_">ShowMessage</span><span class="params">(<span class="built_in">string</span> message)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Processing: &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="type">static</span> <span class="type">void</span> <span class="title function_">Main</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Processor processor = new Processor();</span><br><span class="line">        processor.Process(ShowMessage, <span class="string">&quot;Hello, Delegate as Parameter!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-内置委托类型（Func-Action-Predicate）"><a href="#4-内置委托类型（Func-Action-Predicate）" class="headerlink" title="4. 内置委托类型（Func, Action, Predicate）"></a>4. 内置委托类型（Func, Action, Predicate）</h3><blockquote><p>C# 提供了一些内置的委托类型，如 Func、Action 和 Predicate，简化了委托的使用。</p></blockquote><ul><li>Action：用于没有返回值的方法。</li><li>Func：用于有返回值的方法。</li><li>Predicate：用于返回 bool 类型的方法。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Program</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    public <span class="type">static</span> <span class="type">void</span> <span class="title function_">ShowMessage</span><span class="params">(<span class="built_in">string</span> message)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Action: &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="type">static</span> <span class="type">int</span> <span class="title function_">Add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> x + y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="type">static</span> <span class="type">bool</span> <span class="title function_">IsPositive</span><span class="params">(<span class="type">int</span> number)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> number &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="type">static</span> <span class="type">void</span> <span class="title function_">Main</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Action&lt;<span class="built_in">string</span>&gt; action = ShowMessage;</span><br><span class="line">        action(<span class="string">&quot;Hello, Action!&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Func&lt;<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>&gt; func = Add;</span><br><span class="line">        <span class="type">int</span> result = func(<span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Func result: &quot;</span> + result);</span><br><span class="line"></span><br><span class="line">        Predicate&lt;<span class="type">int</span>&gt; predicate = IsPositive;</span><br><span class="line">        <span class="type">bool</span> isPositive = predicate(<span class="number">5</span>);</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Predicate result: &quot;</span> + isPositive);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-匿名方法和-Lambda-表达式"><a href="#5-匿名方法和-Lambda-表达式" class="headerlink" title="5. 匿名方法和 Lambda 表达式"></a>5. 匿名方法和 Lambda 表达式</h3><blockquote><p>委托可以使用匿名方法和 lambda 表达式来简化代码。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public delegate <span class="type">void</span> <span class="title function_">MyDelegate</span><span class="params">(<span class="built_in">string</span> message)</span>;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Program</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    public <span class="type">static</span> <span class="type">void</span> <span class="title function_">Main</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 匿名方法</span></span><br><span class="line">        MyDelegate del = delegate (<span class="built_in">string</span> msg)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Anonymous method: &quot;</span> + msg);</span><br><span class="line">        &#125;;</span><br><span class="line">        del(<span class="string">&quot;Hello, Anonymous!&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Lambda 表达式</span></span><br><span class="line">        MyDelegate del2 = (msg) =&gt; Console.WriteLine(<span class="string">&quot;Lambda: &quot;</span> + msg);</span><br><span class="line">        del2(<span class="string">&quot;Hello, Lambda!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="6-委托和事件"><a href="#6-委托和事件" class="headerlink" title="6. 委托和事件"></a>6. 委托和事件</h3><blockquote><p>委托是事件的基础，用于定义事件处理程序。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Publisher</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    public delegate <span class="type">void</span> <span class="title function_">MyEventHandler</span><span class="params">(<span class="built_in">string</span> message)</span>;</span><br><span class="line">    public event MyEventHandler RaiseCustomEvent;</span><br><span class="line"></span><br><span class="line">    public <span class="type">void</span> <span class="title function_">DoSomething</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        OnRaiseCustomEvent(<span class="string">&quot;Event triggered!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected virtual <span class="type">void</span> <span class="title function_">OnRaiseCustomEvent</span><span class="params">(<span class="built_in">string</span> message)</span></span><br><span class="line">    &#123;</span><br><span class="line">        RaiseCustomEvent?.Invoke(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Subscriber</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    public <span class="type">void</span> <span class="title function_">HandleCustomEvent</span><span class="params">(<span class="built_in">string</span> message)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Event received: &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Program</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    public <span class="type">static</span> <span class="type">void</span> <span class="title function_">Main</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Publisher publisher = new Publisher();</span><br><span class="line">        Subscriber subscriber = new Subscriber();</span><br><span class="line"></span><br><span class="line">        publisher.RaiseCustomEvent += subscriber.HandleCustomEvent;</span><br><span class="line">        publisher.DoSomething();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;在 C# 中，委托（delegate）是一种引用类型，用于封装一个或多个方法。它类似于函数指针，但更安全且更灵活。委托在事件处理和回调函数中广泛使用。以下是一些关于委托的详细用法和示例：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;1-委托</summary>
      
    
    
    
    <category term="奇奇怪怪的知识" scheme="http://example.com/categories/%E5%A5%87%E5%A5%87%E6%80%AA%E6%80%AA%E7%9A%84%E7%9F%A5%E8%AF%86/"/>
    
    
  </entry>
  
  <entry>
    <title>UnityShader的尝试</title>
    <link href="http://example.com/2024/05/13/UnityShader%E7%9A%84%E5%B0%9D%E8%AF%95/"/>
    <id>http://example.com/2024/05/13/UnityShader%E7%9A%84%E5%B0%9D%E8%AF%95/</id>
    <published>2024-05-13T13:09:15.000Z</published>
    <updated>2024-05-14T11:05:48.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>使用mapcap做的甲壳虫薄膜干涉效果，NDotV采样贴图的uv坐标<br><img src="/images/Post5/%E7%94%B2%E5%A3%B3%E8%99%AB.gif" alt="图"><br>边缘光＋动态y轴采样uv贴图<br><img src="/images/Post5/%E5%85%A8%E6%81%AF%E6%8A%95%E5%BD%B1.gif" alt="图"></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;使用mapcap做的甲壳虫薄膜干涉效果，NDotV采样贴图的uv坐标&lt;br&gt;&lt;img src=&quot;/images/Post5/%E7%94%B2%E5%A3%B3%E8%99%AB.gif&quot; alt=&quot;图&quot;&gt;&lt;br&gt;边缘光＋动态y轴采样uv贴图&lt;br</summary>
      
    
    
    
    <category term="成果展示" scheme="http://example.com/categories/%E6%88%90%E6%9E%9C%E5%B1%95%E7%A4%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>玩Blender的一些成果</title>
    <link href="http://example.com/2024/05/13/%E7%8E%A9Blender%E7%9A%84%E4%B8%80%E4%BA%9B%E6%88%90%E6%9E%9C/"/>
    <id>http://example.com/2024/05/13/%E7%8E%A9Blender%E7%9A%84%E4%B8%80%E4%BA%9B%E6%88%90%E6%9E%9C/</id>
    <published>2024-05-13T13:05:51.000Z</published>
    <updated>2024-05-14T06:07:16.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/Post4/untitled.png" alt="图"><br><img src="/images/Post4/%E9%92%A2%E7%90%B43.png" alt="图"><br><img src="/images/Post4/%E6%9C%BA%E7%94%B2.png" alt="图"><br><img src="/images/Post4/Push%EF%BC%9A%E9%98%BF%E6%A5%A0.png" alt="图"><br><img src="/images/Post4/%E8%B5%9B%E5%8D%9A%E9%B1%BC4.png" alt="图"><br><img src="/images/Post4/%E8%B5%9B%E5%8D%9A%E9%B1%BC%E9%92%A2%E9%93%81%E4%BE%A0%E9%85%8D%E8%89%B2.png" alt="图"><br><img src="/images/Post4/%E5%8F%8C%E6%B3%89.png" alt="图"><br><img src="/images/Post4/fan.png" alt="图"><br><img src="/images/Post4/%E5%92%96%E5%95%A1%E6%9D%AF3.png" alt="图"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/Post4/untitled.png&quot; alt=&quot;图&quot;&gt;&lt;br&gt;&lt;img src=&quot;/images/Post4/%E9%92%A2%E7%90%B43.png&quot; alt=&quot;图&quot;&gt;&lt;br&gt;&lt;img src=&quot;/images/Post4/%E</summary>
      
    
    
    
    <category term="成果展示" scheme="http://example.com/categories/%E6%88%90%E6%9E%9C%E5%B1%95%E7%A4%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>游戏项目展示</title>
    <link href="http://example.com/2024/05/13/%E6%B8%B8%E6%88%8F%E9%A1%B9%E7%9B%AE%E5%B1%95%E7%A4%BA/"/>
    <id>http://example.com/2024/05/13/%E6%B8%B8%E6%88%8F%E9%A1%B9%E7%9B%AE%E5%B1%95%E7%A4%BA/</id>
    <published>2024-05-13T13:04:35.000Z</published>
    <updated>2024-05-13T16:01:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="荒岛之争"><a href="#荒岛之争" class="headerlink" title="荒岛之争"></a>荒岛之争</h2><blockquote><p>一款派对游戏，结合大逃杀玩法，轻松愉快的游玩体验~<br>使用的photon fusion的框架实现联机</p></blockquote><h3 id="视频展示"><a href="#视频展示" class="headerlink" title="视频展示"></a>视频展示</h3><div style="text-align: center;"><iframe width="560" height="315" src="//player.bilibili.com/player.html?aid=785759409&bvid=BV1D14y1R7Fh&cid=1192270220&p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div><h2 id="Push！"><a href="#Push！" class="headerlink" title="Push！"></a>Push！</h2><blockquote><p>一款可自定义数值的格斗游戏,机制有趣玩法多样~</p></blockquote><h3 id="视频展示-1"><a href="#视频展示-1" class="headerlink" title="视频展示"></a>视频展示</h3><div style="text-align: center;"><iframe width="560" height="315" src="//player.bilibili.com/player.html?aid=1104346638&bvid=BV1Jw4m197UA&cid=1540970290&p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div><h2 id="小石年"><a href="#小石年" class="headerlink" title="小石年"></a>小石年</h2><blockquote><p>《小石年》是一款2D横板冒险益智解谜单机游戏。中国神话是国内宝贵的非物质文化遗产，是一个国家文明史的结晶。为打破当今社会人们对传统神话严肃的刻板印象与弘扬石器时代的中国文化，本项目以中国古代炎帝为当时社会做出的贡献为背景，在游戏中玩家扮演小石年，充分发挥自己的创造力，制作各种造福族人的工具。</p></blockquote><h3 id="视频展示-2"><a href="#视频展示-2" class="headerlink" title="视频展示"></a>视频展示</h3><div style="text-align: center;"><iframe width="560" height="315" src="//player.bilibili.com/player.html?aid=1204575459&bvid=BV1Pf42117sr&cid=1544128292&p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div><h2 id="水之旅"><a href="#水之旅" class="headerlink" title="水之旅"></a>水之旅</h2><blockquote><p>这是一款3D横板益智闯关的单机游戏。<br>玩家需要操控小水团，通过转变自身形态（即转变为固、液、气态）尽可能的减少自我损耗从而越过层层障碍，最终流进大海，实现水循环。</p></blockquote><h2 id="视频展示-3"><a href="#视频展示-3" class="headerlink" title="视频展示"></a>视频展示</h2><div style="text-align: center;"><iframe width="560" height="315" src="//player.bilibili.com/player.html?aid=1354683272&bvid=BV1Gz42127CW&cid=1544138852&p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;荒岛之争&quot;&gt;&lt;a href=&quot;#荒岛之争&quot; class=&quot;headerlink&quot; title=&quot;荒岛之争&quot;&gt;&lt;/a&gt;荒岛之争&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;一款派对游戏，结合大逃杀玩法，轻松愉快的游玩体验~&lt;br&gt;使用的photon fusion的框架实</summary>
      
    
    
    
    <category term="成果展示" scheme="http://example.com/categories/%E6%88%90%E6%9E%9C%E5%B1%95%E7%A4%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>文章2：🤔逻辑运算及其电路设计</title>
    <link href="http://example.com/2024/04/29/%E6%96%87%E7%AB%A02%EF%BC%9A%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E5%8F%8A%E5%85%B6%E7%94%B5%E8%B7%AF%E8%AE%BE%E8%AE%A1/"/>
    <id>http://example.com/2024/04/29/%E6%96%87%E7%AB%A02%EF%BC%9A%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E5%8F%8A%E5%85%B6%E7%94%B5%E8%B7%AF%E8%AE%BE%E8%AE%A1/</id>
    <published>2024-04-29T06:39:09.000Z</published>
    <updated>2024-04-29T14:09:44.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>逻辑运算是计算机科学和数学中的一种重要概念，用于处理逻辑值（真或假）的操作。逻辑运算通常应用于布尔代数，涉及到逻辑值之间的关系和操作。以下是常见的逻辑运算：</p></blockquote><h2 id="四类逻辑运算："><a href="#四类逻辑运算：" class="headerlink" title="四类逻辑运算："></a>四类逻辑运算：</h2><h3 id="1-与运算（AND）"><a href="#1-与运算（AND）" class="headerlink" title="1.与运算（AND）"></a>1.与运算（AND）</h3><p>当所有操作数都为真时，结果为真；否则结果为假。通常用符号“&amp;&amp;”表示。</p><table><thead><tr><th>操作数1</th><th>操作数2</th><th>结果</th></tr></thead><tbody><tr><td>真</td><td>真</td><td>真</td></tr><tr><td>真</td><td>假</td><td>假</td></tr><tr><td>假</td><td>真</td><td>假</td></tr><tr><td>假</td><td>假</td><td>假</td></tr></tbody></table><h3 id="2-或运算（OR）"><a href="#2-或运算（OR）" class="headerlink" title="2.或运算（OR）"></a>2.或运算（OR）</h3><p>当至少有一个操作数为真时，结果为真；否则结果为假。通常用符号“||”表示。</p><table><thead><tr><th>操作数1</th><th>操作数2</th><th>结果</th></tr></thead><tbody><tr><td>真</td><td>真</td><td>真</td></tr><tr><td>真</td><td>假</td><td>真</td></tr><tr><td>假</td><td>真</td><td>真</td></tr><tr><td>假</td><td>假</td><td>假</td></tr></tbody></table><h3 id="3-非运算（NOT）"><a href="#3-非运算（NOT）" class="headerlink" title="3.非运算（NOT）"></a>3.非运算（NOT）</h3><p>将操作数的逻辑值取反。通常用符号“!”表示。</p><table><thead><tr><th>操作数</th><th>结果</th></tr></thead><tbody><tr><td>真</td><td>假</td></tr><tr><td>假</td><td>真</td></tr></tbody></table><h3 id="4-异或运算（XOR）"><a href="#4-异或运算（XOR）" class="headerlink" title="4.异或运算（XOR）"></a>4.异或运算（XOR）</h3><p>当操作数的逻辑值不相同时，结果为真；否则结果为假。通常用符号“^”表示。</p><table><thead><tr><th>操作数1</th><th>操作数2</th><th>结果</th></tr></thead><tbody><tr><td>真</td><td>真</td><td>假</td></tr><tr><td>真</td><td>假</td><td>真</td></tr><tr><td>假</td><td>真</td><td>真</td></tr><tr><td>假</td><td>假</td><td>假</td></tr></tbody></table><blockquote><p>这些逻辑运算是由英国数学家乔治·布尔（George Boole）于19世纪中叶提出，bool变量便是以该位数学家而命名。然而逻辑门（执行逻辑运算的电子元件）的发明却来到了20世纪中叶。</p></blockquote><h2 id="逻辑门的电路设计："><a href="#逻辑门的电路设计：" class="headerlink" title="逻辑门的电路设计："></a>逻辑门的电路设计：</h2><h3 id="1-与门（AND-gate）"><a href="#1-与门（AND-gate）" class="headerlink" title="1.与门（AND gate）"></a>1.与门（AND gate）</h3><p>与门的输出为真（1），当且仅当所有输入都为真（1）时，否则输出为假（0）。<br>电路设计中，可以使用晶体管的串联来实现与门。<br>下图是一个基本的两输入与门电路设计：<br><img src="/images/Post2/%E4%B8%8E%E9%97%A8.png" alt="Notgate"><br>其电路符号图为：<br><img src="/images/Post2/AND.png" alt="Notgate"></p><h3 id="2-或门（OR-gate）"><a href="#2-或门（OR-gate）" class="headerlink" title="2.或门（OR gate）"></a>2.或门（OR gate）</h3><p>或门的输出为真（1），当至少一个输入为真（1）时，否则输出为假（0）。<br>电路设计中，可以使用晶体管的并联来实现或门。<br>下图是一个基本的两输入或门电路设计：<br><img src="/images/Post2/%E6%88%96%E9%97%A8.png" alt="Notgate"><br>其电路符号图为：<br><img src="/images/Post2/OR.png" alt="Notgate"></p><h3 id="3-非门（NOT-gate）"><a href="#3-非门（NOT-gate）" class="headerlink" title="3.非门（NOT gate）"></a>3.非门（NOT gate）</h3><p>非门的输出为输入的反相，即当输入为真（1）时，输出为假（0）；当输入为假（0）时，输出为真（1）。电路设计中，可以使用一个晶体管来实现非门。<br>下图是一个基本的非门电路设计：<br><img src="/images/Post2/%E9%9D%9E%E9%97%A8.png" alt="Notgate"><br>其电路符号图为：<br><img src="/images/Post2/NOT.png" alt="Notgate"></p><h3 id="4-异或门（XOR-gate）"><a href="#4-异或门（XOR-gate）" class="headerlink" title="4.异或门（XOR gate）"></a>4.异或门（XOR gate）</h3><p>异或门的输出为真（1），当输入的两个信号相异时（一个为真一个为假），否则输出为假（0）。电路设计中，可以通过多个晶体管和逻辑门的组合来实现异或门。<br>下图是一个基本的两输入异或门电路设计：<br><img src="/images/Post2/%E5%BC%82%E6%88%96%E9%97%A8.png" alt="Notgate"><br>其电路符号图为：<br><img src="/images/Post2/XOR.png" alt="Notgate"></p><blockquote><p>以上便是文章的所有内容</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;逻辑运算是计算机科学和数学中的一种重要概念，用于处理逻辑值（真或假）的操作。逻辑运算通常应用于布尔代数，涉及到逻辑值之间的关系和操作。以下是常见的逻辑运算：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;四类逻辑运算：&quot;&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    <category term="奇奇怪怪的知识" scheme="http://example.com/categories/%E5%A5%87%E5%A5%87%E6%80%AA%E6%80%AA%E7%9A%84%E7%9F%A5%E8%AF%86/"/>
    
    
  </entry>
  
  <entry>
    <title>文章1：✨Charlin&#39;s personal website</title>
    <link href="http://example.com/2024/04/26/%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%E8%AF%9E%E7%94%9F/"/>
    <id>http://example.com/2024/04/26/%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%E8%AF%9E%E7%94%9F/</id>
    <published>2024-04-26T08:41:05.000Z</published>
    <updated>2024-05-01T04:12:32.000Z</updated>
    
    <content type="html"><![CDATA[<div style="text-align: center;">本人的个人网站诞生！在这里我会展示我的个人作品、知识分享以及一些生活碎片~😁</div><p><img src="/images/%E8%A1%A8%E6%83%85%E5%8C%85.png" alt="表情包"></p><div style="text-align: center;"><iframe width="560" height="315" src="//player.bilibili.com/player.html?aid=409893543&bvid=BV19G411a7mr&cid=1372207423&p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div>]]></content>
    
    
      
      
    <summary type="html">&lt;div style=&quot;text-align: center;&quot;&gt;
本人的个人网站诞生！在这里我会展示我的个人作品、知识分享以及一些生活碎片~😁
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/images/%E8%A1%A8%E6%83%85%E5%8C%85.png&quot; alt=</summary>
      
    
    
    
    
  </entry>
  
</feed>
